(ns eopl.parser
  "We will encode the program text as a Lisp to avoid writing a scanner as
  this is not the focus of this project"
  (:require [eopl.util :as util])
  (:refer-clojure :exclude [zero?]))

(defn parse
  "parse is passed a element 'elt' as generated by read-string on the program text"
  [elt]
  (cond (number? elt) {:op :lit-exp
                       :datum elt}
        (symbol? elt) {:op :var-exp
                       :id elt}
        (util/bool? elt) {:op :lit-exp
                          :datum elt}
        (list? elt)
        (let [rator (first elt)
              rands (rest elt)]
          (cond (= rator '+) {:op :primapp-exp
                              :prim :+
                              :rands (map parse rands)}
                (= rator '-) {:op :primapp-exp
                              :prim :-
                              :rands (map parse rands)}
                (= rator '*) {:op :primapp-exp
                              :prim :*
                              :rands (map parse rands)}
                (= rator 'add1) {:op :primapp-exp
                                 :prim :add1
                                 :rands (map parse rands)}
                (= rator 'sub1) {:op :primapp-exp
                                 :prim :sub1
                                 :rands (map parse rands)}
                (= rator 'equal?) {:op :primapp-exp
                                   :prim :equal?
                                   :rands (map parse rands)}
                (= rator 'zero?) {:op :primapp-exp
                                  :prim :zero?
                                  :rands (map parse rands)}
                (= rator 'greater?) {:op :primapp-exp
                                     :prim :greater?
                                     :rands (map parse rands)}
                (= rator 'less?) {:op :primapp-exp
                                  :prim :less?
                                  :rands (map parse rands)}
                (= rator 'if) (let [parsed-rands (map parse rands)]
                                {:op :if-exp
                                 :test-exp (first parsed-rands)
                                 :true-exp (second parsed-rands)
                                 :false-exp (nth parsed-rands 2)})
                :else (throw (Exception. (str "Unknown rator: " rator)))))
        :else (throw (Exception. (str "Invalid element: " elt)))))
    



